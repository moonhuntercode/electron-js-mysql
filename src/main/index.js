// src/main/index.js
import { app, BrowserWindow, ipcMain } from 'electron' // üì¶ Importamos m√≥dulos principales de Electron
import { join } from 'path' // üìÇ Para manejar rutas de archivos
import sequelize, { initializeSequelize } from './db' // üÜï Importamos Sequelize y la funci√≥n de inicializaci√≥n
import Admin from './models/Admin' // üÜï Modelo de Administrador
import Employee from './models/Employee' // üÜï Modelo de Empleado
import Log from './models/Log' // üÜï Modelo de Logs

// Funci√≥n para crear la ventana principal
function createWindow() {
  const mainWindow = new BrowserWindow({
    width: 900,
    height: 670,
    show: false,
    webPreferences: {
      preload: join(__dirname, '../preload/index.js'), // üìÇ Ruta al archivo preload
      sandbox: false
    }
  })

  // Mostrar la ventana cuando est√© lista
  mainWindow.on('ready-to-show', () => {
    mainWindow.show() // üñ•Ô∏è Muestra la ventana cuando est√° lista
  })

  // Cargar la URL del frontend (desarrollo) o el archivo HTML (producci√≥n)
  if (process.env['ELECTRON_RENDERER_URL']) {
    mainWindow.loadURL(process.env['ELECTRON_RENDERER_URL']) // üåê Carga la URL del frontend en desarrollo
  } else {
    mainWindow.loadFile(join(__dirname, '../renderer/index.html')) // üìÑ Carga el archivo HTML en producci√≥n
  }
}

// Evento cuando Electron ha terminado de inicializarse
app.whenReady().then(async () => {
  try {
    // Inicializar Sequelize y validar/crear la base de datos
    await initializeSequelize() // üÜï Valida o crea la base de datos

    // Sincronizar modelos con la base de datos
    await sequelize.sync({ force: false }) // üîÑ Sincroniza los modelos con la base de datos

    // Registrar un administrador por defecto si no existe
    const adminExists = await Admin.findOne({ where: { username: 'admin' } })
    if (!adminExists) {
      await Admin.create({
        username: 'admin',
        password: 'defaultpassword' // üîë Contrase√±a por defecto
      })
      console.log('‚úÖ Administrador por defecto registrado.')
      console.log('----------------------------')
    }

    // Crear la ventana principal
    createWindow() // üñ•Ô∏è Crea la ventana principal
  } catch (error) {
    console.error('‚ùå Error al inicializar la aplicaci√≥n:', error)
  }
})

// Evento cuando todas las ventanas est√°n cerradas
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit() // ‚õî Cierra la aplicaci√≥n en sistemas que no sean macOS
  }
})

// Evento para macOS: recrear la ventana si se hace clic en el √≠cono del dock
app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow() // üñ•Ô∏è Recrea la ventana principal
  }
})

// üÜï Manejador IPC para registrar logs de inicio de sesi√≥n
ipcMain.handle('login', async (_, { userId, userType }) => {
  try {
    // Registrar el log de inicio de sesi√≥n en la base de datos
    await Log.create({
      userId,
      userType,
      action: 'login'
    })
    console.log(`‚úÖ ${userType} con ID ${userId} inici√≥ sesi√≥n.`)
  } catch (error) {
    console.error('‚ùå Error al registrar log de inicio de sesi√≥n:', error)
    throw error // ‚ùå Propagar el error al frontend
  }
})

// üÜï Manejador IPC para registrar logs de cierre de sesi√≥n
ipcMain.handle('logout', async (_, { userId, userType }) => {
  try {
    // Registrar el log de cierre de sesi√≥n en la base de datos
    await Log.create({
      userId,
      userType,
      action: 'logout'
    })
    console.log(`‚úÖ ${userType} con ID ${userId} cerr√≥ sesi√≥n.`)
  } catch (error) {
    console.error('‚ùå Error al registrar log de cierre de sesi√≥n:', error)
    throw error // ‚ùå Propagar el error al frontend
  }
})

// üÜï Manejador IPC para registrar nuevos empleados
ipcMain.handle('register-employee', async (_, data) => {
  try {
    const { name, email } = data
    // Crear un nuevo empleado en la base de datos
    await Employee.create({ name, email })
    console.log(`‚úÖ Empleado registrado: ${name} (${email})`)
  } catch (error) {
    console.error('‚ùå Error al registrar empleado:', error)
    throw error // ‚ùå Propagar el error al frontend
  }
})
